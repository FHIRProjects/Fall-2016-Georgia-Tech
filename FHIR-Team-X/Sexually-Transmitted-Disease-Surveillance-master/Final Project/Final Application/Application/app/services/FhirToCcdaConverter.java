package services;import play.libs.*;import org.openhealthtools.mdht.uml.cda.Act;import org.openhealthtools.mdht.uml.cda.AssignedAuthor;import org.openhealthtools.mdht.uml.cda.AssignedEntity;import org.openhealthtools.mdht.uml.cda.Author;import org.openhealthtools.mdht.uml.cda.CDAFactory;import org.openhealthtools.mdht.uml.cda.ClinicalDocument;import org.openhealthtools.mdht.uml.cda.Component1;import org.openhealthtools.mdht.uml.cda.Component2;import org.openhealthtools.mdht.uml.cda.Component3;import org.openhealthtools.mdht.uml.cda.Component4;import org.openhealthtools.mdht.uml.cda.Consumable;import org.openhealthtools.mdht.uml.cda.DocumentationOf;import org.openhealthtools.mdht.uml.cda.EncompassingEncounter;import org.openhealthtools.mdht.uml.cda.Entry;import org.openhealthtools.mdht.uml.cda.EntryRelationship;import org.openhealthtools.mdht.uml.cda.Guardian;import org.openhealthtools.mdht.uml.cda.HealthCareFacility;import org.openhealthtools.mdht.uml.cda.InfrastructureRootTypeId;import org.openhealthtools.mdht.uml.cda.LanguageCommunication;import org.openhealthtools.mdht.uml.cda.ManufacturedProduct;import org.openhealthtools.mdht.uml.cda.Material;import org.openhealthtools.mdht.uml.cda.Organization;import org.openhealthtools.mdht.uml.cda.Organizer;import org.openhealthtools.mdht.uml.cda.Participant2;import org.openhealthtools.mdht.uml.cda.ParticipantRole;import org.openhealthtools.mdht.uml.cda.Patient;import org.openhealthtools.mdht.uml.cda.PatientRole;import org.openhealthtools.mdht.uml.cda.Person;import org.openhealthtools.mdht.uml.cda.RecordTarget;import org.openhealthtools.mdht.uml.cda.Reference;import org.openhealthtools.mdht.uml.cda.ReferenceRange;import org.openhealthtools.mdht.uml.cda.ResponsibleParty;import org.openhealthtools.mdht.uml.cda.Section;import org.openhealthtools.mdht.uml.cda.ServiceEvent;import org.openhealthtools.mdht.uml.cda.StructuredBody;import org.openhealthtools.mdht.uml.cda.SubjectPerson;import org.openhealthtools.mdht.uml.cda.SubstanceAdministration;import org.openhealthtools.mdht.uml.cda.impl.ClinicalDocumentImpl;import org.openhealthtools.mdht.uml.hl7.datatypes.AD;import org.openhealthtools.mdht.uml.hl7.datatypes.ANY;import org.openhealthtools.mdht.uml.hl7.datatypes.BL;import org.openhealthtools.mdht.uml.hl7.datatypes.CD;import org.openhealthtools.mdht.uml.hl7.datatypes.CE;import org.openhealthtools.mdht.uml.hl7.datatypes.CS;import org.openhealthtools.mdht.uml.hl7.datatypes.DatatypesFactory;import org.openhealthtools.mdht.uml.hl7.datatypes.ED;import org.openhealthtools.mdht.uml.hl7.datatypes.II;import org.openhealthtools.mdht.uml.hl7.datatypes.IVL_PQ;import org.openhealthtools.mdht.uml.hl7.datatypes.IVL_TS;import org.openhealthtools.mdht.uml.hl7.datatypes.IVXB_PQ;import org.openhealthtools.mdht.uml.hl7.datatypes.IVXB_TS;import org.openhealthtools.mdht.uml.hl7.datatypes.ON;import org.openhealthtools.mdht.uml.hl7.datatypes.PN;import org.openhealthtools.mdht.uml.hl7.datatypes.PQ;import org.openhealthtools.mdht.uml.hl7.datatypes.ST;import org.openhealthtools.mdht.uml.hl7.datatypes.SXCM_TS;import org.openhealthtools.mdht.uml.hl7.datatypes.TEL;import org.openhealthtools.mdht.uml.hl7.datatypes.TS;import org.openhealthtools.mdht.uml.hl7.vocab.ActClassObservation;import org.openhealthtools.mdht.uml.hl7.vocab.ActMood;import org.openhealthtools.mdht.uml.hl7.vocab.EntityNameUse;import org.openhealthtools.mdht.uml.hl7.vocab.ParticipationType;import org.openhealthtools.mdht.uml.hl7.vocab.RoleClassRoot;import org.openhealthtools.mdht.uml.hl7.vocab.SetOperator;import org.openhealthtools.mdht.uml.hl7.vocab.TelecommunicationAddressUse;import org.openhealthtools.mdht.uml.hl7.vocab.x_ActClassDocumentEntryAct;import org.openhealthtools.mdht.uml.hl7.vocab.x_ActClassDocumentEntryOrganizer;import org.openhealthtools.mdht.uml.hl7.vocab.x_ActMoodDocumentObservation;import org.openhealthtools.mdht.uml.hl7.vocab.x_ActRelationshipEntry;import org.openhealthtools.mdht.uml.hl7.vocab.x_ActRelationshipEntryRelationship;import org.openhealthtools.mdht.uml.hl7.vocab.x_DocumentActMood;import org.openhealthtools.mdht.uml.cda.util.CDAUtil;import org.eclipse.emf.ecore.xmi.DOMHandler;import org.hl7.fhir.dstu3.model.Address;import org.hl7.fhir.dstu3.model.Address.AddressUse;import org.hl7.fhir.dstu3.model.Bundle;import org.hl7.fhir.dstu3.model.ContactPoint;import org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent;import org.hl7.fhir.dstu3.model.CodeableConcept;import org.hl7.fhir.dstu3.model.Coding;import org.hl7.fhir.dstu3.model.Condition;import org.hl7.fhir.dstu3.model.ContactPoint.ContactPointSystem;import org.hl7.fhir.dstu3.model.DateTimeType;import org.hl7.fhir.dstu3.model.DiagnosticReport;import org.hl7.fhir.dstu3.model.DiagnosticRequest;import org.hl7.fhir.dstu3.model.Encounter;import org.hl7.fhir.dstu3.model.Location;import org.hl7.fhir.dstu3.model.MedicationAdministration;import org.hl7.fhir.dstu3.model.MedicationAdministration.MedicationAdministrationDosageComponent;import org.hl7.fhir.dstu3.model.Observation;import org.hl7.fhir.dstu3.model.Observation.ObservationReferenceRangeComponent;import org.hl7.fhir.dstu3.model.HumanName;import org.hl7.fhir.dstu3.model.HumanName.NameUse;import org.hl7.fhir.dstu3.model.Immunization;import org.hl7.fhir.dstu3.model.Patient.ContactComponent;import org.hl7.fhir.dstu3.model.Patient.PatientCommunicationComponent;import org.hl7.fhir.dstu3.model.Period;import org.hl7.fhir.dstu3.model.Practitioner;import org.hl7.fhir.dstu3.model.SimpleQuantity;import org.hl7.fhir.dstu3.model.Type;import org.hl7.fhir.exceptions.FHIRException;import ca.uhn.fhir.context.FhirContext;import ca.uhn.fhir.rest.client.IGenericClient;import ca.uhn.fhir.rest.gclient.TokenClientParam;import org.w3c.dom.Document;import org.w3c.dom.Element;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.UUID;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;public class FhirToCcdaConverter{	Document dom = null;	Act problemListAct;	Section immuniSection;	Section medAdminSection;	Section diagRepSection;	public FhirToCcdaConverter( )	{	}	public Document pull( String ssn  )	{		FhirContext ctx = FhirContext.forDstu3();		String serverBase = "http://162.249.6.176:8080/baseDstu3";        String patientSystem = "2.16.840.1.113883.4.1";        String patientId = ssn;		IGenericClient client = ctx.newRestfulGenericClient(serverBase); 		Bundle bundle1 = client.search().forResource(DiagnosticReport.class)				.where(new TokenClientParam("patient.identifier").exactly().systemAndCode(patientSystem, patientId))                .include(DiagnosticReport.INCLUDE_RESULT.asRecursive())				.returnBundle(Bundle.class)				.execute();                        Bundle bundle2 = client.search().forResource(model.XPatient.class)				.where(new TokenClientParam("identifier").exactly().systemAndCode(patientSystem, patientId))				.returnBundle(Bundle.class)				.execute();                        Bundle bundle3 = client.search().forResource(model.XEncounter.class)				.where(new TokenClientParam("patient.identifier").exactly().systemAndCode(patientSystem, patientId))                .include(Encounter.INCLUDE_PRACTITIONER.asRecursive())                .include(Encounter.INCLUDE_LOCATION.asRecursive())				.returnBundle(Bundle.class)				.execute();                        Bundle bundle4 = client.search().forResource(Condition.class)				.where(new TokenClientParam("patient.identifier").exactly().systemAndCode(patientSystem, patientId))				.returnBundle(Bundle.class)				.execute();                        Bundle bundle5 = client.search().forResource(MedicationAdministration.class)				.where(new TokenClientParam("patient.identifier").exactly().systemAndCode(patientSystem, patientId))				.returnBundle(Bundle.class)				.execute();                Bundle bundle6 = client.search().forResource(Immunization.class)				.where(new TokenClientParam("patient.identifier").exactly().systemAndCode(patientSystem, patientId))				.returnBundle(Bundle.class)				.execute();                        Bundle completeBundle = new Bundle();        List<Bundle.BundleEntryComponent> bundleList = new ArrayList<Bundle.BundleEntryComponent>(bundle1.getEntry());        bundleList.addAll(bundle2.getEntry());        bundleList.addAll(bundle3.getEntry());        bundleList.addAll(bundle4.getEntry());        bundleList.addAll(bundle5.getEntry());        bundleList.addAll(bundle6.getEntry());        completeBundle.setEntry(bundleList);        		System.out.println(ctx.newXmlParser().setPrettyPrint(true).encodeResourceToString(completeBundle));		Document dom = null;		try{			ClinicalDocument doc = CDAFactory.eINSTANCE.createClinicalDocument();			InfrastructureRootTypeId typeId = CDAFactory.eINSTANCE.createInfrastructureRootTypeId();			typeId.setExtension("POCD_HD000040");			doc.setTypeId(typeId);			II id1 = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.19.4", "c266");			doc.setId(id1);			II templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.3.27.1776");			doc.getTemplateIds().add(templateId);			CE code = DatatypesFactory.eINSTANCE.createCE("55751-2", "2.16.840.1.113883.6.1", "LOINC", "Public Health Case report");			doc.setCode(code);			ST title = DatatypesFactory.eINSTANCE.createST("Initial Public Health Case Report");			doc.setTitle(title);			CE confidentialityCode = DatatypesFactory.eINSTANCE.createCE("N", "2.16.840.1.113883.5.25");			doc.setConfidentialityCode(confidentialityCode);						CS language = DatatypesFactory.eINSTANCE.createCS();			language.setCode("en-US");			doc.setLanguageCode(language);			RecordTarget recordTarget = CDAFactory.eINSTANCE.createRecordTarget();			doc.getRecordTargets().add(recordTarget);                        ArrayList<Observation> observations = new ArrayList<Observation>();            			for (BundleEntryComponent be : completeBundle.getEntry()) {				if (be.getResource() instanceof model.XPatient) {					model.XPatient pat = (model.XPatient) be.getResource();					recordTarget.setPatientRole(getPatientRole(doc, pat));				} else if (be.getResource() instanceof Practitioner) {					Practitioner prac = (Practitioner) be.getResource();                    setPractitionerData(doc, prac);				} else if (be.getResource() instanceof Location) {					Location loc = (Location) be.getResource();                    setLocationData(doc, loc);				} else if (be.getResource() instanceof model.XEncounter) {                    model.XEncounter enc = (model.XEncounter) be.getResource();                    setEncompassingEncounter(doc, enc);                } else if (be.getResource() instanceof DiagnosticReport) {                    DiagnosticReport dr = (DiagnosticReport) be.getResource();                    if(diagRepSection == null){                		populateDiagnosticReportSection(doc);                	}                    setDiagnosticReportData(doc, dr);                } else if (be.getResource() instanceof MedicationAdministration) {                	MedicationAdministration medAdmin = (MedicationAdministration) be.getResource();                	if(medAdminSection == null){                		populateMedAdminSection(doc);                	}                    setMedicationAdministrationData(doc, medAdmin);                }else if (be.getResource() instanceof Condition) {                	Condition cond = (Condition) be.getResource();                	if(problemListAct == null){                		populateProblemListAct(doc);                	}                    setConditionData(cond);                }else if (be.getResource() instanceof Immunization) {                	Immunization medAdmin = (Immunization) be.getResource();                	if(immuniSection == null){                		populateImmuniSection(doc);                	}                    setImmunizationData(doc, medAdmin);                }			}			dom =	CDAUtil.save(doc, (DOMHandler) null);		}catch(Exception e){			e.printStackTrace();		}		return dom;	}		public PatientRole getPatientRole(ClinicalDocument doc, model.XPatient pat)  throws FHIRException {		PatientRole patientRole = CDAFactory.eINSTANCE.createPatientRole();				Patient patient = CDAFactory.eINSTANCE.createPatient();		patientRole.setPatient(patient);		II PatientId = DatatypesFactory.eINSTANCE.createII();		patientRole.getIds().add(PatientId);		PatientId.setExtension(pat.getIdentifier().get(0).getValue().replaceFirst("(\\d{3})(\\d{2})(\\d+)", "$1-$2-$3"));		PatientId.setRoot(pat.getIdentifier().get(0).getSystem());		if(pat.getName() != null && !pat.getName().isEmpty()){			HumanName nm = pat.getName().get(0);			//	for(HumanName nm : pat.getName()){			//		if(NameUse.OFFICIAL.equals(nm.getUse())){ 			PN name = DatatypesFactory.eINSTANCE.createPN();			name.addGiven(nm.getGivenAsSingleString())			.addFamily(nm.getFamilyAsSingleString())			.addSuffix(nm.getSuffixAsSingleString());			name.getUses().add(EntityNameUse.L);			patient.getNames().add(name);			//	}			//	}		}		SubjectPerson sp = CDAFactory.eINSTANCE.createSubjectPerson();				if (pat.getDeceasedBooleanType() != null) {			BL preferenceInd = DatatypesFactory.eINSTANCE.createBL(pat.getDeceasedBooleanType().getValue());			sp.setSDTCDeceasedInd(preferenceInd); 		} else if (pat.getDeceasedDateTimeType() !=null) {			TS deceasedDate = DatatypesFactory.eINSTANCE.createTS();			SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd"); 			DateTimeType dod=pat.getDeceasedDateTimeType();			String dods = sf.format(dod.getValue()); 			deceasedDate.setValue(dods);			sp.setSDTCDeceasedTime(deceasedDate);		}		if(pat.getTelecom() != null && !pat.getTelecom().isEmpty()){			for(ContactPoint c : pat.getTelecom()){				if(ContactPointSystem.PHONE.equals(c.getSystem())){ 					TEL telecom = DatatypesFactory.eINSTANCE.createTEL();					telecom.setValue(c.getValue());					telecom.getUses().add(TelecommunicationAddressUse.WP);					patientRole.getTelecoms().add(telecom); 				}else if(ContactPointSystem.FAX.equals(c.getSystem())){					TEL fax = DatatypesFactory.eINSTANCE.createTEL();					fax.setValue(c.getValue());					fax.getUses().add(TelecommunicationAddressUse.WP);					patientRole.getTelecoms().add(fax);				}else if(ContactPointSystem.EMAIL.equals(c.getSystem())){					TEL email = DatatypesFactory.eINSTANCE.createTEL();					email.setValue(c.getValue());					email.getUses().add(TelecommunicationAddressUse.WP);					patientRole.getTelecoms().add(email);				}			}		}		if(pat.getAddress() != null && !pat.getAddress().isEmpty()){			for(Address addr : pat.getAddress()){                AD patientAddress = DatatypesFactory.eINSTANCE.createAD();                patientAddress.addStreetAddressLine(addr.getLine().get(0).getValueNotNull());                patientAddress.addCity(addr.getCity());                patientAddress.addCountry(addr.getCountry());                patientAddress.addPostalCode(addr.getPostalCode());                patientRole.getAddrs().add(patientAddress);			}		}				for(PatientCommunicationComponent comm : pat.getCommunication()){			LanguageCommunication  langComm = CDAFactory.eINSTANCE.createLanguageCommunication();			BL preferenceInd = DatatypesFactory.eINSTANCE.createBL(comm.getPreferred());			langComm.setPreferenceInd(preferenceInd);			if(comm.getLanguage() !=null){				CS langCode = DatatypesFactory.eINSTANCE.createCS();				langCode.setCode(comm.getLanguage().getCodingFirstRep().getCode());				langComm.setLanguageCode(langCode);			}			patient.getLanguageCommunications().add(langComm); 		}				if("M".equals(pat.getGender().toCode())){ 			CE administrativeGenderCode = DatatypesFactory.eINSTANCE.createCE("M", "2.16.840.1.113883.5.1");			patient.setAdministrativeGenderCode(administrativeGenderCode);		}else if("F".equals(pat.getGender().toCode())){ 			CE administrativeGenderCode = DatatypesFactory.eINSTANCE.createCE("F", "2.16.840.1.113883.5.1");			patient.setAdministrativeGenderCode(administrativeGenderCode);		}                // 27. Patient Class        Component1 comp1 = populateComponentOf(doc);        EncompassingEncounter encount = comp1.getEncompassingEncounter();        CodeableConcept patClass = pat.getPatientClass();		        if(encount !=null && patClass !=null){        	CE patientCE = DatatypesFactory.eINSTANCE.createCE();        	Coding patClassCoding = patClass.getCodingFirstRep();        	patientCE.setCode(patClassCoding.getCode());        	patientCE.setCodeSystem(patClassCoding.getSystem());        	patientCE.setDisplayName(patClassCoding.getDisplay());        	encount.setCode(patientCE);        }		Date dob=pat.getBirthDate();		if(dob !=null){			TS birthTime = DatatypesFactory.eINSTANCE.createTS();			SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd"); 			String dobs = sf.format(dob); 			birthTime.setValue(dobs);  			patient.setBirthTime(birthTime);		}		CE raceCode = DatatypesFactory.eINSTANCE.createCE();		CodeableConcept race = pat.getRace();		if(race != null){			Coding raceCoding = race.getCoding().get(0);			raceCode.setCode(raceCoding.getCode());			raceCode.setCodeSystem(raceCoding.getSystem());			raceCode.setCodeSystemName(race.getText());			raceCode.setDisplayName(raceCoding.getDisplay());			patient.setRaceCode(raceCode);		}		CE ethnicGroupCode = DatatypesFactory.eINSTANCE.createCE();		CodeableConcept ethnicity = pat.getEthnicity();		if(ethnicity !=null){			Coding ethnicityCoding = ethnicity.getCoding().get(0);			ethnicGroupCode.setCode(ethnicityCoding.getCode());			ethnicGroupCode.setCodeSystem(ethnicityCoding.getSystem());			ethnicGroupCode.setCodeSystemName(ethnicity.getText());			ethnicGroupCode.setDisplayName(ethnicityCoding.getDisplay());			patient.setEthnicGroupCode(ethnicGroupCode);		}		if(pat.getContact() != null && !pat.getContact().isEmpty()){			Guardian  guardian= CDAFactory.eINSTANCE.createGuardian();			patient.getGuardians().add(guardian);			ContactComponent con = pat.getContact().get(0);			if(con.getTelecom() != null && !con.getTelecom().isEmpty()){				for(ContactPoint c : con.getTelecom()){					if(ContactPointSystem.PHONE.equals(c.getSystem())){ 						TEL telecom = DatatypesFactory.eINSTANCE.createTEL();						telecom.setValue(c.getValue());						telecom.getUses().add(TelecommunicationAddressUse.WP);						guardian.getTelecoms().add(telecom); 					}else if(ContactPointSystem.FAX.equals(c.getSystem())){						TEL fax = DatatypesFactory.eINSTANCE.createTEL();						fax.setValue(c.getValue());						fax.getUses().add(TelecommunicationAddressUse.WP);						guardian.getTelecoms().add(fax);					}else if(ContactPointSystem.EMAIL.equals(c.getSystem())){						TEL email = DatatypesFactory.eINSTANCE.createTEL();						email.setValue(c.getValue());						email.getUses().add(TelecommunicationAddressUse.WP);						guardian.getTelecoms().add(email);					}				}			}			AD guardianAddress = DatatypesFactory.eINSTANCE.createAD();			guardianAddress.addStreetAddressLine(con.getAddress().getLine().get(0).getValueNotNull());			guardianAddress.addCity(con.getAddress().getCity());            guardianAddress.addState(con.getAddress().getState());			guardianAddress.addCountry(con.getAddress().getCountry());			guardianAddress.addPostalCode(con.getAddress().getPostalCode());			guardian.getAddrs().add(guardianAddress);			if(con.getName() != null && !con.getName().isEmpty()){  				Person  guardianPerson= CDAFactory.eINSTANCE.createPerson(); 				guardian.setGuardianPerson(guardianPerson);								HumanName nm = con.getName(); 				PN conName = DatatypesFactory.eINSTANCE.createPN();				conName.addGiven(nm.getGivenAsSingleString())				.addFamily(nm.getFamilyAsSingleString())				.addSuffix(nm.getSuffixAsSingleString()); 				conName.getUses().add(EntityNameUse.L);				guardianPerson.getNames().add(conName); 			}		}         return patientRole;    }        public Component1 populateComponentOf(ClinicalDocument doc) {        Component1 comp1 = doc.getComponentOf();        if (comp1 == null) {            comp1 = CDAFactory.eINSTANCE.createComponent1();            doc.setComponentOf(comp1);        }                EncompassingEncounter encount = comp1.getEncompassingEncounter();        if (encount == null) {            encount = CDAFactory.eINSTANCE.createEncompassingEncounter();            comp1.setEncompassingEncounter(encount);        }        return comp1;    }        public StructuredBody populateStructuredBody(ClinicalDocument doc) {        Component2 comp2 = doc.getComponent();        if (comp2 == null) {            comp2 = CDAFactory.eINSTANCE.createComponent2();            doc.setComponent(comp2);        }                StructuredBody structBody = comp2.getStructuredBody();        if (structBody == null) {            structBody = CDAFactory.eINSTANCE.createStructuredBody();            comp2.setStructuredBody(structBody);        }        return structBody;    }        public void setEncompassingEncounter(ClinicalDocument doc, model.XEncounter encounter) {        Component1 comp1 = populateComponentOf(doc);        EncompassingEncounter encount = comp1.getEncompassingEncounter();        if (encounter.getPeriod() != null) {            // 46. Date discharged            IVL_TS encounterTS = DatatypesFactory.eINSTANCE.createIVL_TS();            IVXB_TS low = DatatypesFactory.eINSTANCE.createIVXB_TS();            IVXB_TS high = DatatypesFactory.eINSTANCE.createIVXB_TS();            SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd");            if (encounter.getPeriod().getStart() != null) {                low.setValue(sf.format(encounter.getPeriod().getStart()));                encounterTS.setLow(low);            }            if (encounter.getPeriod().getEnd() != null) {                high.setValue(sf.format(encounter.getPeriod().getEnd()));                encounterTS.setHigh(high);            }            encount.setEffectiveTime(encounterTS);        }                setTriggerCode(doc, encounter);        SimpleDateFormat sf = new SimpleDateFormat("yyyyMMddHHmmss+0000");                if(encounter.getReportDate() !=null){        	Date reportDate = encounter.getReportDate().getValueAsCalendar().getTime();        	TS effectiveTime = DatatypesFactory.eINSTANCE.createTS(sf.format(reportDate));        	doc.setEffectiveTime(effectiveTime);        }        Author author = CDAFactory.eINSTANCE.createAuthor();        doc.getAuthors().add(author);        if(encounter.getReportSubmissionDate() !=null){        	Date submissionDate = encounter.getReportSubmissionDate().getValueAsCalendar().getTime();        	TS issueTime = DatatypesFactory.eINSTANCE.createTS(sf.format(submissionDate));        	author.setTime(issueTime);        	AssignedAuthor assignedAuthor = CDAFactory.eINSTANCE.createAssignedAuthor();        	author.setAssignedAuthor(assignedAuthor);        	II assignedAuthId = DatatypesFactory.eINSTANCE.createII();        	assignedAuthor.getIds().add(assignedAuthId);        	assignedAuthId.setRoot(encounter.getSendingApplication().toString());        }                setEncounterSection(doc, encounter);    }        public void setTriggerCode(ClinicalDocument doc, model.XEncounter encounter) {        DocumentationOf docOf = CDAFactory.eINSTANCE.createDocumentationOf();        doc.getDocumentationOfs().add(docOf);        ServiceEvent se = CDAFactory.eINSTANCE.createServiceEvent();        docOf.setServiceEvent(se);        if(encounter.getTriggerCode() !=null){        	Coding reasonCode = encounter.getTriggerCode().getCodingFirstRep();        	CE code = DatatypesFactory.eINSTANCE.createCE(reasonCode.getCode(), reasonCode.getSystem());        	code.setDisplayName(reasonCode.getDisplay());        	se.setCode(code);         }    }        public void setEncounterSection(ClinicalDocument doc, model.XEncounter encounter) {        StructuredBody structBody = populateStructuredBody(doc);        Component3 comp3 = CDAFactory.eINSTANCE.createComponent3();        structBody.getComponents().add(comp3);        Section section = CDAFactory.eINSTANCE.createSection();        comp3.setSection(section);        II templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.2.22.1");        section.getTemplateIds().add(templateId);		CE code = DatatypesFactory.eINSTANCE.createCE("46240-8", "2.16.840.1.113883.6.1", "LOINC",				"History of encounters");		section.setCode(code);		ST title = DatatypesFactory.eINSTANCE.createST("Encounters");		section.setTitle(title);                Entry entryLE1 = CDAFactory.eINSTANCE.createEntry();        section.getEntries().add(entryLE1);        entryLE1.setTypeCode(x_ActRelationshipEntry.DRIV);        org.openhealthtools.mdht.uml.cda.Encounter xmlEncounter = CDAFactory.eINSTANCE.createEncounter();        entryLE1.setEncounter(xmlEncounter);        templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.4.49");        xmlEncounter.getTemplateIds().add(templateId);        // 18. Hospital Unit        Participant2 part = CDAFactory.eINSTANCE.createParticipant2();        xmlEncounter.getParticipants().add(part);        part.setTypeCode(ParticipationType.LOC);        ParticipantRole partRole = CDAFactory.eINSTANCE.createParticipantRole();        part.setParticipantRole(partRole);        partRole.setClassCode(RoleClassRoot.SDLOC);        templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.4.32");        partRole.getTemplateIds().add(templateId);        		CE serviceLocationCode = DatatypesFactory.eINSTANCE.createCE();		CodeableConcept hospitalUnit = encounter.getHospitalUnit();		if(hospitalUnit !=null){			Coding hospitalUnitCoding = hospitalUnit.getCodingFirstRep();			serviceLocationCode.setCode(hospitalUnitCoding.getCode());			serviceLocationCode.setCodeSystem(hospitalUnitCoding.getSystem());			serviceLocationCode.setDisplayName(hospitalUnitCoding.getDisplay());			partRole.setCode(serviceLocationCode);		}        // 42. Diagnosis, 43. Date of diagnosis        EntryRelationship entryRel = CDAFactory.eINSTANCE.createEntryRelationship();        xmlEncounter.getEntryRelationships().add(entryRel);        entryRel.setTypeCode(x_ActRelationshipEntryRelationship.XCRPT);        Act act = CDAFactory.eINSTANCE.createAct();        entryRel.setAct(act);        act.setClassCode(x_ActClassDocumentEntryAct.ACT);        act.setMoodCode(x_DocumentActMood.EVN);        templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.4.80");        act.getTemplateIds().add(templateId);        CE diagnosisSectionCode = DatatypesFactory.eINSTANCE.createCE();		diagnosisSectionCode.setCode("29308-4");		diagnosisSectionCode.setCodeSystem("2.16.840.1.113883.6.1");        diagnosisSectionCode.setCodeSystemName("LOINC");		diagnosisSectionCode.setDisplayName("DIAGNOSIS");        act.setCode(diagnosisSectionCode);        entryRel = CDAFactory.eINSTANCE.createEntryRelationship();        act.getEntryRelationships().add(entryRel);        entryRel.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);        org.openhealthtools.mdht.uml.cda.Observation obs = CDAFactory.eINSTANCE.createObservation();                if (encounter.getPeriod() != null) {             IVL_TS encounterTS = DatatypesFactory.eINSTANCE.createIVL_TS();            IVXB_TS low = DatatypesFactory.eINSTANCE.createIVXB_TS();            IVXB_TS high = DatatypesFactory.eINSTANCE.createIVXB_TS();            SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd");            if (encounter.getPeriod().getStart() != null) {                low.setValue(sf.format(encounter.getPeriod().getStart()));                encounterTS.setLow(low);            }            if (encounter.getPeriod().getEnd() != null) {                high.setValue(sf.format(encounter.getPeriod().getEnd()));                encounterTS.setHigh(high);            }            obs.setEffectiveTime(encounterTS);        }                if (encounter.getTriggerCode() != null) {    		Coding obsCoding = encounter.getTriggerCode().getCodingFirstRep();    		CD obscode = DatatypesFactory.eINSTANCE.createCD();    		obscode.setCode(obsCoding.getCode());    		obscode.setCodeSystem(obsCoding.getSystem());    		obscode.setDisplayName(obsCoding.getDisplay());    		obs.setCode(obscode);    	}                entryRel.setObservation(obs);    }        public void setPractitionerData(ClinicalDocument doc, Practitioner prac) {        Component1 comp1 = populateComponentOf(doc);        EncompassingEncounter encompassingEncounter = comp1.getEncompassingEncounter();		ResponsibleParty responsibleParty = CDAFactory.eINSTANCE.createResponsibleParty();		encompassingEncounter.setResponsibleParty(responsibleParty);		AssignedEntity assignedEntity = CDAFactory.eINSTANCE.createAssignedEntity();        if (prac.getIdentifierFirstRep() != null) {            II practitionerId = DatatypesFactory.eINSTANCE.createII();            assignedEntity.getIds().add(practitionerId);            practitionerId.setExtension(prac.getIdentifierFirstRep().getValue());            practitionerId.setRoot(prac.getIdentifierFirstRep().getSystem());        }		responsibleParty.setAssignedEntity(assignedEntity);		Person assignedPerson = CDAFactory.eINSTANCE.createPerson();		assignedEntity.setAssignedPerson(assignedPerson);		if(prac.getName() != null && !prac.getName().isEmpty()){			HumanName nm = prac.getName().get(0);			//	for(HumanName nm : pracName.getName()){			//		if(NameUse.OFFICIAL.equals(nm.getUse())){ 			PN pracName = DatatypesFactory.eINSTANCE.createPN();			pracName.addGiven(nm.getGivenAsSingleString())			.addFamily(nm.getFamilyAsSingleString())			.addSuffix(nm.getSuffixAsSingleString()); 			pracName.getUses().add(EntityNameUse.L);			assignedPerson.getNames().add(pracName);			//	}			//	}		}		if(prac.getTelecom() != null && !prac.getTelecom().isEmpty()){			for(ContactPoint c : prac.getTelecom()){				if(ContactPointSystem.PHONE.equals(c.getSystem())){ 					TEL telecom = DatatypesFactory.eINSTANCE.createTEL();					telecom.setValue(c.getValue());					telecom.getUses().add(TelecommunicationAddressUse.WP);					assignedEntity.getTelecoms().add(telecom); 				}else if(ContactPointSystem.FAX.equals(c.getSystem())){					TEL fax = DatatypesFactory.eINSTANCE.createTEL();					fax.setValue(c.getValue());					fax.getUses().add(TelecommunicationAddressUse.WP);					assignedEntity.getTelecoms().add(fax);				}else if(ContactPointSystem.EMAIL.equals(c.getSystem())){					TEL email = DatatypesFactory.eINSTANCE.createTEL();					email.setValue(c.getValue());					email.getUses().add(TelecommunicationAddressUse.WP);					assignedEntity.getTelecoms().add(email);				}			}		}		if(prac.getAddress() != null && !prac.getAddress().isEmpty()){			for(Address addr : prac.getAddress()){                AD pracAddress = DatatypesFactory.eINSTANCE.createAD();                pracAddress.addStreetAddressLine(addr.getLine().get(0).getValueNotNull());                pracAddress.addCity(addr.getCity());                pracAddress.addState(addr.getState());                pracAddress.addCountry(addr.getCountry());                pracAddress.addPostalCode(addr.getPostalCode());                assignedEntity.getAddrs().add(pracAddress);			}		}    }        public void setLocationData(ClinicalDocument doc, Location loc) {        Component1 comp1 = populateComponentOf(doc);        EncompassingEncounter encompassingEncounter = comp1.getEncompassingEncounter();        org.openhealthtools.mdht.uml.cda.Location location = CDAFactory.eINSTANCE.createLocation();        encompassingEncounter.setLocation(location);        HealthCareFacility hcr = CDAFactory.eINSTANCE.createHealthCareFacility();        location.setHealthCareFacility(hcr);        if (loc.getIdentifierFirstRep() != null) {            II hcrId = DatatypesFactory.eINSTANCE.createII();            hcr.getIds().add(hcrId);            hcrId.setExtension(loc.getIdentifierFirstRep().getValue());            hcrId.setRoot(loc.getIdentifierFirstRep().getSystem());        }        Coding locationType;        if (loc.getType() != null && loc.getType().getCodingFirstRep() != null) {            locationType = loc.getType().getCodingFirstRep();            CE facilityType = DatatypesFactory.eINSTANCE.createCE(locationType.getCode(), locationType.getSystem());            facilityType.setDisplayName(locationType.getDisplay());            hcr.setCode(facilityType);        }        Organization serviceProviderOrganization = CDAFactory.eINSTANCE.createOrganization();        hcr.setServiceProviderOrganization(serviceProviderOrganization);        if (loc.getName() != null && !loc.getName().trim().equals("")) {            ON orgName = DatatypesFactory.eINSTANCE.createON();            orgName.addText(loc.getName());            serviceProviderOrganization.getNames().add(orgName);        }        		if(loc.getTelecom() != null && !loc.getTelecom().isEmpty()){			for(ContactPoint c : loc.getTelecom()){				if(ContactPointSystem.PHONE.equals(c.getSystem())){ 					TEL telecom = DatatypesFactory.eINSTANCE.createTEL();					telecom.setValue(c.getValue());					telecom.getUses().add(TelecommunicationAddressUse.WP);					serviceProviderOrganization.getTelecoms().add(telecom); 				}			}		}        		if(loc.getAddress() != null && !loc.getAddress().isEmpty()){            Address addr = loc.getAddress();            AD locAddress = DatatypesFactory.eINSTANCE.createAD();            locAddress.addStreetAddressLine(addr.getLine().get(0).getValueNotNull());            locAddress.addCity(addr.getCity());            locAddress.addState(addr.getState());            locAddress.addCountry(addr.getCountry());            locAddress.addPostalCode(addr.getPostalCode());            serviceProviderOrganization.getAddrs().add(locAddress);		}    }        public void setDiagnosticReportData(ClinicalDocument doc, DiagnosticReport diagReport) throws FHIRException {    	Entry entryLE1 = CDAFactory.eINSTANCE.createEntry();    	diagRepSection.getEntries().add(entryLE1);    	entryLE1.setTypeCode(x_ActRelationshipEntry.DRIV);    	Organizer orgLE1 = CDAFactory.eINSTANCE.createOrganizer();    	orgLE1.setClassCode(x_ActClassDocumentEntryOrganizer.BATTERY);    	orgLE1.setMoodCode(ActMood.EVN);    	II templateIdLE1 = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.4.1");    	orgLE1.getTemplateIds().add(templateIdLE1);    	if (diagReport.getIdentifierFirstRep() != null) {    		II id_labtOrg1 = DatatypesFactory.eINSTANCE.createII(diagReport.getIdentifierFirstRep().getValue());    		orgLE1.getIds().add(id_labtOrg1);    	}    	if (diagReport.getCode() != null) {    		Coding coding = diagReport.getCode().getCodingFirstRep();    		CD diagcode = DatatypesFactory.eINSTANCE.createCD();    		diagcode.setCode(coding.getCode());    		diagcode.setCodeSystem(coding.getSystem());    		diagcode.setDisplayName(coding.getDisplay());    		orgLE1.setCode(diagcode);    	}    	CS statusCodeLE1 = DatatypesFactory.eINSTANCE.createCS("completed");    	orgLE1.setStatusCode(statusCodeLE1);    	entryLE1.setOrganizer(orgLE1);    	for (org.hl7.fhir.dstu3.model.Reference result : diagReport.getResult()) {    		Observation observation = (Observation)result.getResource();    		Component4 comp4 = CDAFactory.eINSTANCE.createComponent4();    		orgLE1.getComponents().add(comp4);    		org.openhealthtools.mdht.uml.cda.Observation obs = CDAFactory.eINSTANCE.createObservation();    		comp4.setObservation(obs);    		CS statusCodeO1 = DatatypesFactory.eINSTANCE.createCS(observation.getStatus().getDisplay());    		obs.setStatusCode(statusCodeO1);    		CodeableConcept obsCodeableConcept = observation.getCode();    		if(obsCodeableConcept !=null){    			Coding coding = obsCodeableConcept.getCodingFirstRep();    			CE obsCode = DatatypesFactory.eINSTANCE.createCE();    			obsCode.setCode(coding.getCode());    			obsCode.setCodeSystem(coding.getSystem());    			obsCode.setDisplayName(coding.getDisplay());     			obs.setCode(obsCode);    		}    		    		if(observation.getEffective() !=null){    			IVL_TS effectiveTimeLE1 = DatatypesFactory.eINSTANCE.createIVL_TS();    			effectiveTimeLE1.setValue(observation.getEffective().primitiveValue());    			obs.setEffectiveTime(effectiveTimeLE1);    		}    		if(observation.hasValueCodeableConcept()){    			CE valuetypeE1=DatatypesFactory.eINSTANCE.createCE();    			CodeableConcept valCodeableConcept = observation.getValueCodeableConcept();    			Coding valCoding = valCodeableConcept.getCodingFirstRep();    			valuetypeE1.setCode(valCoding.getCode());    			valuetypeE1.setCodeSystem(valCoding.getSystem());      			valuetypeE1.setDisplayName(valCoding.getDisplay());    			obs.getValues().add(valuetypeE1);     		}else if (observation.hasValueQuantity()){    			ANY valueLE1 = DatatypesFactory.eINSTANCE.createPQ(    					observation.getValueQuantity().getValue().doubleValue(),observation.getValueQuantity().getUnit());     			obs.getValues().add(valueLE1);     		}    		for (ObservationReferenceRangeComponent range : observation.getReferenceRange()) {    			if(range.hasMeaning()){    				CE rangeE1=DatatypesFactory.eINSTANCE.createCE();    				CodeableConcept rangeCodeableConcept = observation.getValueCodeableConcept();    				Coding rangeCoding = rangeCodeableConcept.getCodingFirstRep();    				rangeE1.setCode(rangeCoding.getCode());    				rangeE1.setCodeSystem(rangeCoding.getSystem());      				rangeE1.setDisplayName(rangeCoding.getDisplay());    				obs.getValues().add(rangeE1);    			}else if(range.hasLow() || range.hasHigh()){    				SimpleQuantity lowQty = range.getLow();    				SimpleQuantity highQty = range.getHigh();    				IVL_PQ oEIvlPq=DatatypesFactory.eINSTANCE.createIVL_PQ();    				IVXB_PQ oELow=DatatypesFactory.eINSTANCE.createIVXB_PQ();    				oELow.setValue(lowQty.getValue());    				oELow.setUnit(lowQty.getUnit());    				oEIvlPq.setLow(oELow);    				IVXB_PQ oEHigh=DatatypesFactory.eINSTANCE.createIVXB_PQ();    				oEHigh.setValue(highQty.getValue());    				oEHigh.setUnit(highQty.getUnit());    				oEIvlPq.setHigh(oEHigh);    				obs.getValues().add(oEIvlPq);    			}    		}    	}    }    public void setMedicationAdministrationData(ClinicalDocument doc, MedicationAdministration medAdmin) throws FHIRException {    	Entry entryLE1 = CDAFactory.eINSTANCE.createEntry();    	medAdminSection.getEntries().add(entryLE1);    	entryLE1.setTypeCode(x_ActRelationshipEntry.DRIV);    	SubstanceAdministration administration =     			CDAFactory.eINSTANCE.createSubstanceAdministration();     	entryLE1.setSubstanceAdministration(administration);    	    	if (medAdmin.getIdentifierFirstRep() != null) {    		II idMedAdmin1 = DatatypesFactory.eINSTANCE.createII(medAdmin.getIdentifierFirstRep().getValue());    		administration.getIds().add(idMedAdmin1);    	}    	CS statusCodeO1 = DatatypesFactory.eINSTANCE.createCS(medAdmin.getStatus().getDisplay());    	administration.setStatusCode(statusCodeO1);     	if(medAdmin.hasEffectiveTimeDateTimeType()) {    		DateTimeType maet = medAdmin.getEffectiveTimeDateTimeType();     		SimpleDateFormat sf = new SimpleDateFormat("yyyyMMddHHmmss+0000");    		SXCM_TS effTime = DatatypesFactory.eINSTANCE.createSXCM_TS();    		effTime.setValue(sf.format(maet.getValue()));    		administration.getEffectiveTimes().add(effTime);    	}    	CodeableConcept medAdminCodeableConcept = medAdmin.getMedicationCodeableConcept();    	if(medAdminCodeableConcept != null){    		Coding medAdminCoding = medAdminCodeableConcept.getCodingFirstRep();      		ManufacturedProduct product = CDAFactory.eINSTANCE.createManufacturedProduct();     		Material material = CDAFactory.eINSTANCE.createMaterial();     		CE materialE1=DatatypesFactory.eINSTANCE.createCE();     		materialE1.setCode(medAdminCoding.getCode());    		materialE1.setCodeSystem(medAdminCoding.getSystem());      		materialE1.setDisplayName(medAdminCoding.getDisplay());    		material.setCode(materialE1);    		product.setManufacturedMaterial(material);     		Consumable consumable = CDAFactory.eINSTANCE.createConsumable();     		consumable.setManufacturedProduct(product);     		administration.setConsumable(consumable);     	}    	MedicationAdministrationDosageComponent madc = medAdmin.getDosage();    	CodeableConcept routeCodeableConcept = madc.getRoute();    	if(routeCodeableConcept!= null){    		Coding routeCoding = routeCodeableConcept.getCodingFirstRep();     		CE routeE1=DatatypesFactory.eINSTANCE.createCE();     		routeE1.setCode(routeCoding.getCode());    		routeE1.setCodeSystem(routeCoding.getSystem());      		routeE1.setDisplayName(routeCoding.getDisplay());    		administration.setRouteCode(routeE1);    	}    	SimpleQuantity dose = madc.getDose();    	if(dose!= null){    		IVL_PQ doseQuantity = DatatypesFactory.eINSTANCE.createIVL_PQ();    		doseQuantity.setValue(dose.getValue());    		administration.setDoseQuantity(doseQuantity);     	}    }            public void setConditionData(Condition cond) throws FHIRException {    	Coding condCoding = cond.getCategoryFirstRep().getCodingFirstRep();    	if("symptom".equals(condCoding.getCode()) || "complaint".equals(condCoding.getCode()) ){ 						EntryRelationship actER1 = CDAFactory.eINSTANCE.createEntryRelationship();			actER1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);			org.openhealthtools.mdht.uml.cda.Observation obsPEAEO1 = CDAFactory.eINSTANCE.createObservation();			obsPEAEO1.setClassCode(ActClassObservation.OBS);			obsPEAEO1.setMoodCode(x_ActMoodDocumentObservation.EVN);			II templateidPEAEO1 = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.4.4");			obsPEAEO1.getTemplateIds().add(templateidPEAEO1);			II idPEAEO1 = DatatypesFactory.eINSTANCE.createII(UUID.randomUUID().toString());			obsPEAEO1.getIds().add(idPEAEO1);			if (cond.getCode() != null) {				CodeableConcept codeCodeableConcept = cond.getCode();				Coding codeCoding = codeCodeableConcept.getCodingFirstRep(); 				CD codePEAEO1 = DatatypesFactory.eINSTANCE.createCD();				codePEAEO1.setCode(codeCoding.getCode());				codePEAEO1.setCodeSystem(codeCoding.getSystem());  				codePEAEO1.setDisplayName(codeCoding.getDisplay());  				obsPEAEO1.setCode(codePEAEO1);			}						if (cond.getOnsetDateTimeType() != null) { 	            DateTimeType codtt = cond.getOnsetDateTimeType();	        	SimpleDateFormat sfyyyymmdd = new SimpleDateFormat("yyyyMMdd");	        	IVL_TS effTime = DatatypesFactory.eINSTANCE.createIVL_TS();	        	effTime.setValue(sfyyyymmdd.format(codtt.getValue()));	        	obsPEAEO1.setEffectiveTime(effTime);	        }			if(cond.getVerificationStatus() !=null){				CS StatuscodePEAEO1 = DatatypesFactory.eINSTANCE.createCS(cond.getVerificationStatus().getDisplay());				obsPEAEO1.setStatusCode(StatuscodePEAEO1);			}						actER1.setObservation(obsPEAEO1);			problemListAct.getEntryRelationships().add(actER1);    	}    }        public void setImmunizationData(ClinicalDocument doc, Immunization immuniztion) throws FHIRException {     	Entry entryLE1 = CDAFactory.eINSTANCE.createEntry();     	entryLE1.setTypeCode(x_ActRelationshipEntry.DRIV);    	immuniSection.getEntries().add(entryLE1);    	SubstanceAdministration administration =     			CDAFactory.eINSTANCE.createSubstanceAdministration();     	entryLE1.setSubstanceAdministration(administration);    	    	if (immuniztion.getIdentifierFirstRep() != null) {    		II idMedAdmin1 = DatatypesFactory.eINSTANCE.createII(immuniztion.getIdentifierFirstRep().getValue());    		administration.getIds().add(idMedAdmin1);    	}    	CS statusCodeO1 = DatatypesFactory.eINSTANCE.createCS(immuniztion.getStatus().getDisplay());    	administration.setStatusCode(statusCodeO1);     	Date imd = immuniztion.getDate();    	if(imd !=null){    		SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd");    		SXCM_TS effTime = DatatypesFactory.eINSTANCE.createSXCM_TS();    		effTime.setValue(sf.format(imd));    		administration.getEffectiveTimes().add(effTime);    	}    	CodeableConcept immuniztionCodeableConcept = immuniztion.getVaccineCode();    	if(immuniztionCodeableConcept !=null){    		Coding immuniztionCoding = immuniztionCodeableConcept.getCodingFirstRep();      		ManufacturedProduct product = CDAFactory.eINSTANCE.createManufacturedProduct();     		Material material = CDAFactory.eINSTANCE.createMaterial();     		CE materialE1=DatatypesFactory.eINSTANCE.createCE();     		materialE1.setCode(immuniztionCoding.getCode());    		materialE1.setCodeSystem(immuniztionCoding.getSystem());      		materialE1.setDisplayName(immuniztionCoding.getDisplay());    		material.setCode(materialE1);    		product.setManufacturedMaterial(material);     		Consumable consumable = CDAFactory.eINSTANCE.createConsumable();     		consumable.setManufacturedProduct(product);     		administration.setConsumable(consumable);    	}     	CodeableConcept routeCodeableConcept = immuniztion.getRoute();    	if(routeCodeableConcept !=null){    	Coding routeCoding = routeCodeableConcept.getCodingFirstRep();     	CE routeE1=DatatypesFactory.eINSTANCE.createCE();     	routeE1.setCode(routeCoding.getCode());    	routeE1.setCodeSystem(routeCoding.getSystem());      	routeE1.setDisplayName(routeCoding.getDisplay());    	administration.setRouteCode(routeE1);    	}    	SimpleQuantity dose = immuniztion.getDoseQuantity();    	if(dose!= null){     		IVL_PQ doseQuantity = DatatypesFactory.eINSTANCE.createIVL_PQ();    		doseQuantity.setValue(dose.getValue());    		administration.setDoseQuantity(doseQuantity);     	}    }        public void populateProblemListAct(ClinicalDocument doc) {    	StructuredBody structBody = populateStructuredBody(doc);    	Component3 comp3 = CDAFactory.eINSTANCE.createComponent3();    	structBody.getComponents().add(comp3);    	Section section = CDAFactory.eINSTANCE.createSection();    	comp3.setSection(section);		II templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.2.5.1");		section.getTemplateIds().add(templateId);		CE code = DatatypesFactory.eINSTANCE.createCE("11450-4", "2.16.840.1.113883.6.1", "LOINC", "PROBLEM LIST");		section.setCode(code);		ST title = DatatypesFactory.eINSTANCE.createST("PROBLEMS");		section.setTitle(title);    	Entry entryLE1 = CDAFactory.eINSTANCE.createEntry();    	section.getEntries().add(entryLE1);    	entryLE1.setTypeCode(x_ActRelationshipEntry.DRIV);    	    	Act actPA1 = CDAFactory.eINSTANCE.createAct();		actPA1.setClassCode(x_ActClassDocumentEntryAct.ACT);		actPA1.setMoodCode(x_DocumentActMood.EVN);		II templateIdPEA1 = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.4.3");		actPA1.getTemplateIds().add(templateIdPEA1);		II idPA1 = DatatypesFactory.eINSTANCE.createII(UUID.randomUUID().toString());		actPA1.getIds().add(idPA1);		CD codePEA1 = DatatypesFactory.eINSTANCE.createCD();		codePEA1.setCode("CONC");		codePEA1.setCodeSystem("2.16.840.1.113883.5.6");		codePEA1.setDisplayName("Concern");		actPA1.setCode(codePEA1);				problemListAct = actPA1;		entryLE1.setAct(problemListAct);    }        public void populateImmuniSection(ClinicalDocument doc) {    	StructuredBody structBody = populateStructuredBody(doc);    	Component3 comp3 = CDAFactory.eINSTANCE.createComponent3();    	structBody.getComponents().add(comp3);    	Section section = CDAFactory.eINSTANCE.createSection();    	comp3.setSection(section);    			II templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.2.2.1");		section.getTemplateIds().add(templateId);		CE code = DatatypesFactory.eINSTANCE.createCE("11369-6", "2.16.840.1.113883.6.1", "LOINC", "History of immunizations");		section.setCode(code);		ST title = DatatypesFactory.eINSTANCE.createST("IMMUNIZATIONS");		section.setTitle(title);				immuniSection = section;    }        public void populateMedAdminSection(ClinicalDocument doc) {    	StructuredBody structBody = populateStructuredBody(doc);    	Component3 comp3 = CDAFactory.eINSTANCE.createComponent3();    	structBody.getComponents().add(comp3);    	Section section = CDAFactory.eINSTANCE.createSection();    	comp3.setSection(section);    			II templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.2.38");		section.getTemplateIds().add(templateId);		CE code = DatatypesFactory.eINSTANCE.createCE("29549-3", "2.16.840.1.113883.6.1", "LOINC", "MEDICATIONS ADMINISTERED");		section.setCode(code);		ST title = DatatypesFactory.eINSTANCE.createST("MEDICATIONS ADMINISTERED");		section.setTitle(title);				medAdminSection = section;    }        public void populateDiagnosticReportSection(ClinicalDocument doc) {    	StructuredBody structBody = populateStructuredBody(doc);    	Component3 comp3 = CDAFactory.eINSTANCE.createComponent3();    	structBody.getComponents().add(comp3);    	Section section = CDAFactory.eINSTANCE.createSection();    	comp3.setSection(section);    	    	II templateId = DatatypesFactory.eINSTANCE.createII("2.16.840.1.113883.10.20.22.2.3.1");		section.getTemplateIds().add(templateId);		CE code = DatatypesFactory.eINSTANCE.createCE("30954-2", "2.16.840.1.113883.6.1", "LOINC", "RELEVANT DIAGNOSTIC TESTS AND/OR LABORATORY DATA");		section.setCode(code);		ST title = DatatypesFactory.eINSTANCE.createST("Results");		section.setTitle(title);				diagRepSection = section;    }}